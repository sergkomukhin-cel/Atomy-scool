import os
import random
from datetime import datetime, time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import database_pg
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_name = user.first_name
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    invited_by = None
    if context.args:
        try:
            invited_by = int(context.args[0])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª
            conn = database_pg.get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (invited_by,))
            if not cursor.fetchone():
                invited_by = None
            cursor.close()
            conn.close()
        except ValueError:
            invited_by = None
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î PostgreSQL
    database_pg.add_user(user.id, user.username, user.full_name, invited_by)
    
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)."
    
    if invited_by:
        welcome_text += "\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!"
    
    welcome_text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    
    await update.message.reply_text(welcome_text)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    conn = database_pg.get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT u.*, COUNT(r.user_id) as referrals_count 
            FROM users u 
            LEFT JOIN users r ON u.user_id = r.invited_by 
            WHERE u.user_id = %s 
            GROUP BY u.user_id
        """, (user.id,))
        user_data = cursor.fetchone()
        
        if user_data:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
            inviter_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if user_data[4]:
                cursor.execute("SELECT full_name FROM users WHERE user_id = %s", (user_data[4],))
                inviter_data = cursor.fetchone()
                if inviter_data:
                    inviter_name = inviter_data[0]
            
            response = (
                f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üÜî ID: {user_data[0]}\n"
                f"üë§ –ò–º—è: {user_data[2]}\n"
                f"üéØ –£—Ä–æ–≤–µ–Ω—å: {user_data[5]}\n"
                f"‚≠ê –û—á–∫–∏: {user_data[6]}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {inviter_name}\n"
                f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {user_data[7]}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data[3].strftime('%Y-%m-%d %H:%M')}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            )
        else:
            response = "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        
        await update.message.reply_text(response, parse_mode='HTML')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")
    finally:
        cursor.close()
        conn.close()

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/tracker - –û—Ç–∫—Ä—ã—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/progress - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ö° <b>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è:</b>\n"
        "/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n"
        "/tasks - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
        "/level - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tracker
async def tracker_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await send_daily_tracker(context, user.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
async def send_daily_tracker(context: ContextTypes.DEFAULT_TYPE, user_id: int = None):
    if user_id is None:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¥–Ω—è
    conn = database_pg.get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É
        cursor.execute("SELECT * FROM books ORDER BY RANDOM() LIMIT 1")
        book = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ
        cursor.execute("SELECT * FROM videos ORDER BY RANDOM() LIMIT 1")
        video = cursor.fetchone()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        cursor.execute("SELECT * FROM products ORDER BY RANDOM() LIMIT 1")
        product = cursor.fetchone()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        
        # 1. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–Ω–∏–≥–µ
        if book:
            book_title = book[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            book_author = book[2] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
            short_quote = book[4][:100] + "..." if book[4] and len(book[4]) > 100 else book[4] or "–¶–∏—Ç–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            book_message = (
                f"üìñ <b>–ß—Ç–µ–Ω–∏–µ (15-30 –º–∏–Ω)</b>\n\n"
                f"<b>–ö–Ω–∏–≥–∞:</b> {book_title}\n"
                f"<b>–ê–≤—Ç–æ—Ä:</b> {book_author}\n"
                f"<b>–¶–∏—Ç–∞—Ç–∞:</b> {short_quote}\n\n"
                f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã</i>"
            )
            
            book_keyboard = [
                [InlineKeyboardButton("‚úÖ –ß—Ç–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="habit_reading")],
                [InlineKeyboardButton("üìñ –ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data=f"full_quote_{book[0]}")]
            ]
            book_reply_markup = InlineKeyboardMarkup(book_keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=book_message,
                reply_markup=book_reply_markup,
                parse_mode='HTML'
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="üìñ <b>–ß—Ç–µ–Ω–∏–µ (15-30 –º–∏–Ω)</b>\n\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∫–Ω–∏–≥ –Ω–µ—Ç –≤ –±–∞–∑–µ",
                parse_mode='HTML'
            )
        
        # 2. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∏–¥–µ–æ
        if video:
            video_title = video[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            video_description = video[3] or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            video_message = (
                f"üé¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –≤–∏–¥–µ–æ</b>\n\n"
                f"<b>–í–∏–¥–µ–æ:</b> {video_title}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {video_description}\n"
                f"<b>–°—Å—ã–ª–∫–∞:</b> {video[2]}"
            )
            
            video_keyboard = [
                [InlineKeyboardButton("‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data="habit_video")]
            ]
            video_reply_markup = InlineKeyboardMarkup(video_keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=video_message,
                reply_markup=video_reply_markup,
                parse_mode='HTML'
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="üé¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –≤–∏–¥–µ–æ</b>\n\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤–∏–¥–µ–æ –Ω–µ—Ç –≤ –±–∞–∑–µ",
                parse_mode='HTML'
            )
        
        # 3. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        if product:
            product_name = product[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            product_description = product[2] or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            product_benefits = product[3] or "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
            
            product_message = (
                f"üß¥ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ Atomy</b>\n\n"
                f"<b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product_name}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product_description}\n"
                f"<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b> {product_benefits}\n\n"
                f"<b>–û—Ç–∑—ã–≤:</b> {product[4] or '–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'}"
            )
            
            product_keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω", callback_data="habit_product")]
            ]
            product_reply_markup = InlineKeyboardMarkup(product_keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=product_message,
                reply_markup=product_reply_markup,
                parse_mode='HTML'
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="üß¥ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ Atomy</b>\n\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ",
                parse_mode='HTML'
            )
        
        # 4. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        final_message = (
            f"üìã <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫</b>\n\n"
            f"–û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫:"
        )
        
        final_keyboard = [
            [InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data="habit_event")],
            [InlineKeyboardButton("‚úÖ –ó–≤–æ–Ω–æ–∫/–≤—Å—Ç—Ä–µ—á–∞", callback_data="habit_call")],
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="show_progress")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–µ—Ä", callback_data="close_tracker")]
        ]
        final_reply_markup = InlineKeyboardMarkup(final_keyboard)
        
        await context.bot.send_message(
            chat_id=user_id,
            text=final_message,
            reply_markup=final_reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
    finally:
        cursor.close()
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
async def send_full_quote(context: ContextTypes.DEFAULT_TYPE, user_id: int, book_id: int):
    conn = database_pg.get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        cursor.execute("SELECT * FROM books WHERE book_id = %s", (book_id,))
        book = cursor.fetchone()
        
        if book:
            book_title = book[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            book_author = book[2] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
            full_quote = book[4] or "–¶–∏—Ç–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            external_link = book[5]  # –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
            
            if external_link:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ
                quote_message = (
                    f"üìñ <b>–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏</b>\n\n"
                    f"<b>–ö–Ω–∏–≥–∞:</b> {book_title}\n"
                    f"<b>–ê–≤—Ç–æ—Ä:</b> {book_author}\n\n"
                    f"–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n{external_link}"
                )
            elif len(full_quote) <= 4000:
                # –ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                quote_message = (
                    f"üìñ <b>–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏</b>\n\n"
                    f"<b>–ö–Ω–∏–≥–∞:</b> {book_title}\n"
                    f"<b>–ê–≤—Ç–æ—Ä:</b> {book_author}\n\n"
                    f"{full_quote}"
                )
            else:
                # –ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Å—ã–ª–∫—É
                quote_message = (
                    f"üìñ <b>–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏</b>\n\n"
                    f"<b>–ö–Ω–∏–≥–∞:</b> {book_title}\n"
                    f"<b>–ê–≤—Ç–æ—Ä:</b> {book_author}\n\n"
                    f"–¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram. "
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–Ω–µ—à–Ω—é—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=quote_message,
                parse_mode='HTML'
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã: {e}")
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã."
        )
    finally:
        cursor.close()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
    if data.startswith("full_quote_"):
        book_id = data.replace("full_quote_", "")
        await send_full_quote(context, user_id, book_id)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–∏–≤—ã—á–µ–∫
    if data.startswith("habit_"):
        habit_name = data.replace("habit_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = database_pg.get_db_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute(
                "INSERT INTO completed_tasks (user_id, task_type, completed_date) VALUES (%s, %s, %s)",
                (user_id, habit_name, datetime.now().date())
            )
            conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
                reply_to_message_id=query.message.message_id
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
            await query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        finally:
            cursor.close()
            conn.close()
    
    elif data == "show_progress":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await show_progress(query)
    
    elif data == "close_tracker":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–µ—Ä–æ–º
        await query.delete_message()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def show_progress(query):
    user_id = query.from_user.id
    conn = database_pg.get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cursor.execute("""
            SELECT task_type, COUNT(*) 
            FROM completed_tasks 
            WHERE user_id = %s AND completed_date >= CURRENT_DATE - INTERVAL '7 days'
            GROUP BY task_type
        """, (user_id,))
        
        progress = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        message = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n"
        
        habits = {
            'reading': 'üìñ –ß—Ç–µ–Ω–∏–µ',
            'video': 'üé¨ –í–∏–¥–µ–æ',
            'product': 'üß¥ –ü—Ä–æ–¥—É–∫—Ç—ã',
            'event': 'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            'call': 'üìû –ó–≤–æ–Ω–∫–∏/–≤—Å—Ç—Ä–µ—á–∏'
        }
        
        for habit_type, habit_name in habits.items():
            count = 0
            for p in progress:
                if p[0] == habit_type:
                    count = p[1]
                    break
            
            message += f"{habit_name}: {count}/7\n"
        
        message += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        
        await query.edit_message_text(
            text=message,
            parse_mode='HTML'
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
        )
    finally:
        cursor.close()
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /progress
async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    conn = database_pg.get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT task_type, COUNT(*) 
            FROM completed_tasks 
            WHERE user_id = %s AND completed_date >= CURRENT_DATE - INTERVAL '7 days'
            GROUP BY task_type
        """, (user.id,))
        
        progress = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        message = "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n"
        
        habits = {
            'reading': 'üìñ –ß—Ç–µ–Ω–∏–µ',
            'video': 'üé¨ –í–∏–¥–µ–æ',
            'product': 'üß¥ –ü—Ä–æ–¥—É–∫—Ç—ã',
            'event': 'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            'call': 'üìû –ó–≤–æ–Ω–∫–∏/–≤—Å—Ç—Ä–µ—á–∏'
        }
        
        for habit_type, habit_name in habits.items():
            count = 0
            for p in progress:
                if p[0] == habit_type:
                    count = p[1]
                    break
            
            message += f"{habit_name}: {count}/7\n"
        
        message += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
    finally:
        cursor.close()
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = database_pg.get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        
        if not users:
            print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
            
        for user in users:
            await send_daily_tracker(context, user[0])
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    finally:
        cursor.close()
        conn.close()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database_pg.init_db()
    database_pg.update_db_structure()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("tracker", tracker_command))
    app.add_handler(CommandHandler("progress", progress_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 9:00
    job_queue = app.job_queue
    job_queue.run_daily(daily_reminder, time=time(hour=9, minute=0, second=0))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()